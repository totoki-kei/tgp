#pragma once

#include "Resource.h"
#include "D3DCore.h"

class D3DEffect : public Resource
{
public:
	class Technique {
		friend class D3DEffect;
		
		D3DEffect* effect;

//		ID3D11EffectTechnique* tech;
//		ID3D11EffectPass* pass;

		int passCount;
		int passIndex;

		Technique(D3DEffect* e, int i);
		Technique(D3DEffect* e, const TCHAR* n);

	public:
		// 空のコンストラクタ
		Technique();

		D3DEffect* GetEffect() const;
		D3DCore* GetCore() const;

		bool IsValidTechnique();
		void SetPass(int);
		int GetPass();
		int GetPassCount();
		void MoveNext();
		bool EndOfPass();

		void ApplyPass();

		BYTE* GetPassInputSignature(int, int*);
	};

	// 定数バッファ
	// リソース扱いはしない（上のEffectでまとめて管理する）
	class ConstantBufferBase {
		friend class D3DEffect;
		D3DEffect &parent;
		//ID3D11EffectConstantBuffer *cbuffer;
		ID3D11Buffer *buf;
		//D3D11_EFFECT_VARIABLE_DESC valdesc;

		std::shared_ptr<ConstantBufferBase> next;

	protected:
		ConstantBufferBase(D3DEffect&) ;
		virtual ~ConstantBufferBase() ;

		//void CreateBuffer(int dataSize, ID3D11EffectConstantBuffer* cb);
	};

	template <typename T>
	class ConstantBuffer : public ConstantBufferBase {
		friend class D3DEffect;
		T data;

		ConstantBuffer(D3DEffect& e, ID3D11EffectConstantBuffer* cb) : ConstantBufferBase(e) {
			CreateBuffer(sizeof(T), cb);
			Reload();
		}

	public:

		T* GetPointer() {
			return &data;
		}
		void Update() {
//			cbuffer->SetRawValue(&data, 0, sizeof(T));

			void* pd;
			buf->Map(D3D11_MAP_WRITE_DISCARD, 0, &pd);
			CopyMemory(pd, &data, sizeof(T));
			buf->Unmap();
		}
		void Reload() {
//			cbuffer->GetRawValue(&data, 0, sizeof(T));

			//void* pd;
			//buf->Map(D3D11_MAP_READ, 0, &pd);
			//CopyMemory(&data, pd, sizeof(T));
			//buf->Unmap();
		}

	};

protected:
	D3DCore * core;

	BYTE *srcData;
	int srcSize;
	
	ID3DBlob* blob;

	enum class LoadType {
		File,
		Memory,
		Resource,
	} loadtype;

	tstring name;

	typedef std::map<tstring, std::shared_ptr<ConstantBufferBase> > CBMap;
	typedef std::pair<tstring, std::shared_ptr<ConstantBufferBase> > CBMapEntry;

	CBMap cbufferMap;


public: // methods
	D3DEffect(D3DCore *, const TCHAR*);
	D3DEffect(D3DCore *, const TCHAR*, const BYTE[], int);

	template<int ISize>
	D3DEffect(D3DCore *c, const TCHAR *n, const BYTE d[ISize])
		: D3DEffect(c, n, d, ILength) {}

	~D3DEffect(void);

	bool isDisposed();
	void Dispose();

	D3DCore* GetCore();

	Technique GetTechnique(int);
	Technique GetTechnique(const TCHAR*);

	void* GetBytecode(int* length);

	// ConstantBuffer<T>経由で操作してもらうため、この辺りは不要になる
	//void SetConstantBuffer(const TCHAR* name, void* data, int dataSize);
	//void GetConstantBuffer(const TCHAR* name, void* data, int dataSize);

	//template <typename TBuffer>
	//void SetConstantBuffer(const TCHAR* name, TBuffer& val){
	//	SetConstantBuffer(name, &val, sizeof(TBuffer));
	//}

	//template <typename TBuffer>
	//void GetConstantBuffer(const TCHAR* name, TBuffer& val){
	//	GetConstantBuffer(name, &val, sizeof(TBuffer));
	//}


	template <typename T>
	std::weak_ptr< D3DEffect::ConstantBuffer<T> > GetConstantBuffer(const TCHAR* name){
		typedef D3DEffect::ConstantBuffer<T> BufferT;

		auto it = cbufferMap.find(name);
		if (it != cbufferMap.end()) {
			// 見つかったらそれを返す。
			return std::dynamic_pointer_cast<BufferT>(it->second);
		}

		// エフェクトから定数バッファを探してMapに追加する
		auto cb = effect->GetConstantBufferByName(name);
		if (cb == nullptr) {
			return std::weak_ptr<BufferT>();
		}
		else {
			std::shared_ptr<BufferT> cbp = std::shared_ptr<BufferT>(new D3DEffect::ConstantBuffer<T>(*this, cb));
			std::shared_ptr<D3DEffect::ConstantBufferBase> cbpb(cbp);
			cbufferMap.insert(CBMapEntry(name, cbpb));
			return cbp;
		}


	}

	template<typename T>
	void GetVariable(const TCHAR* name, T* data){
		auto v = effect->GetVariableByName(name);
		v->GetRawValue(data, 0, sizeof(T));
	}
	template<typename T>
	void SetVariable(const TCHAR* name, T* data){
		auto v = effect->GetVariableByName(name);
		v->SetRawValue(data, 0, sizeof(T));
	}


protected: // inner methods
	void LoadFileToMemory(const TCHAR*);

};
